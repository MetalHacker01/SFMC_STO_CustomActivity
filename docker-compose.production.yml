# Docker Compose configuration for production deployment
# This configuration includes the main application with optional supporting services

version: '3.8'

services:
  # =============================================================================
  # Main Application Service
  # =============================================================================
  sto-activity:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: sto-activity:latest
    container_name: sto-activity-prod
    restart: unless-stopped
    
    # Environment configuration
    env_file:
      - .env.production
    
    # Port mapping
    ports:
      - "443:3000"  # HTTPS
      - "80:8080"   # HTTP redirect
    
    # Volume mounts
    volumes:
      # SSL certificates
      - ./ssl:/app/ssl:ro
      # Log files
      - sto-logs:/var/log/sto-activity
      # Holiday data cache
      - sto-data:/app/data
      # Configuration files
      - ./config:/app/config:ro
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Dependencies
    depends_on:
      - redis
      - postgres
    
    # Networks
    networks:
      - sto-network
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=sto-activity"

  # =============================================================================
  # Redis Cache Service (Optional)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: sto-redis-prod
    restart: unless-stopped
    
    # Configuration
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    
    # Volume for persistence
    volumes:
      - redis-data:/data
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Networks
    networks:
      - sto-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # =============================================================================
  # PostgreSQL Database Service (Optional)
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: sto-postgres-prod
    restart: unless-stopped
    
    # Environment variables
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    
    # Volume for persistence
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Networks
    networks:
      - sto-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # =============================================================================
  # Nginx Reverse Proxy (Optional)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: sto-nginx-prod
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "80:80"
      - "443:443"
    
    # Configuration and SSL certificates
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - sto-logs:/var/log/nginx
    
    # Dependencies
    depends_on:
      - sto-activity
    
    # Networks
    networks:
      - sto-network
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Monitoring Services
  # =============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sto-prometheus-prod
    restart: unless-stopped
    
    # Configuration
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # Port mapping
    ports:
      - "9090:9090"
    
    # Command line options
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    # Networks
    networks:
      - sto-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sto-grafana-prod
    restart: unless-stopped
    
    # Environment variables
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    # Volume for persistence
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Port mapping
    ports:
      - "3001:3000"
    
    # Dependencies
    depends_on:
      - prometheus
    
    # Networks
    networks:
      - sto-network

# =============================================================================
# Networks
# =============================================================================
networks:
  sto-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  # Application data
  sto-logs:
    driver: local
  sto-data:
    driver: local
  
  # Database data
  redis-data:
    driver: local
  postgres-data:
    driver: local
  
  # Monitoring data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local